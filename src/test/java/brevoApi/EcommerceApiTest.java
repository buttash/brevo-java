/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoApi;

import brevo.ApiException;
import brevoModel.*;
import org.junit.Ignore;
import org.junit.Test;

import java.math.BigDecimal;
import java.util.List;

/**
 * API tests for EcommerceApi
 */
@Ignore
public class EcommerceApiTest {

    private final EcommerceApi api = new EcommerceApi();

    
    /**
     * Create orders in batch
     *
     * Create multiple orders at one time instead of one order at a time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBatchOrderTest() throws ApiException {
        OrderBatch orderBatch = null;
        api.createBatchOrder(orderBatch);

        // TODO: test validations
    }
    
    /**
     * Managing the status of the order
     *
     * Manages the transactional status of the order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrderTest() throws ApiException {
        Order order = null;
        api.createOrder(order);

        // TODO: test validations
    }
    
    /**
     * Create categories in batch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateBatchCategoryTest() throws ApiException {
        CreateUpdateBatchCategory createUpdateBatchCategory = null;
        CreateUpdateBatchCategoryModel response = api.createUpdateBatchCategory(createUpdateBatchCategory);

        // TODO: test validations
    }
    
    /**
     * Create products in batch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateBatchProductsTest() throws ApiException {
        CreateUpdateBatchProducts createUpdateBatchProducts = null;
        CreateUpdateBatchProductsModel response = api.createUpdateBatchProducts(createUpdateBatchProducts);

        // TODO: test validations
    }
    
    /**
     * Create/Update a category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateCategoryTest() throws ApiException {
        CreateUpdateCategory createUpdateCategory = null;
        CreateCategoryModel response = api.createUpdateCategory(createUpdateCategory);

        // TODO: test validations
    }
    
    /**
     * Create/Update a product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateProductTest() throws ApiException {
        CreateUpdateProduct createUpdateProduct = null;
        CreateProductModel response = api.createUpdateProduct(createUpdateProduct);

        // TODO: test validations
    }
    
    /**
     * Activate the eCommerce app
     *
     * Getting access to Brevo eCommerce.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ecommerceActivatePostTest() throws ApiException {
        api.ecommerceActivatePost();

        // TODO: test validations
    }
    
    /**
     * Get detailed attribution metrics for a single Brevo campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ecommerceAttributionMetricsConversionSourceConversionSourceIdGetTest() throws ApiException {
        Object conversionSource = null;
        Object conversionSourceId = null;
        api.ecommerceAttributionMetricsConversionSourceConversionSourceIdGet(conversionSource, conversionSourceId);

        // TODO: test validations
    }
    
    /**
     * Get attribution metrics for one or more Brevo campaigns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ecommerceAttributionMetricsGetTest() throws ApiException {
        Object periodFrom = null;
        Object periodTo = null;
        Object emailCampaignId = null;
        api.ecommerceAttributionMetricsGet(periodFrom, periodTo, emailCampaignId);

        // TODO: test validations
    }
    
    /**
     * Get attributed product sales for a single Brevo campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ecommerceAttributionProductsConversionSourceConversionSourceIdGetTest() throws ApiException {
        Object conversionSource = null;
        Object conversionSourceId = null;
        api.ecommerceAttributionProductsConversionSourceConversionSourceIdGet(conversionSource, conversionSourceId);

        // TODO: test validations
    }
    
    /**
     * Return all your categories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCategoriesTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        String sort = null;
        List<String> ids = null;
        String name = null;
        String modifiedSince = null;
        String createdSince = null;
        GetCategories response = api.getCategories(limit, offset, sort, ids, name, modifiedSince, createdSince);

        // TODO: test validations
    }
    
    /**
     * Get a category details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCategoryInfoTest() throws ApiException {
        String id = null;
        GetCategoryDetails response = api.getCategoryInfo(id);

        // TODO: test validations
    }
    
    /**
     * Get order details
     *
     * Get all the orders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrdersTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        String sort = null;
        String modifiedSince = null;
        String createdSince = null;
        GetOrders response = api.getOrders(limit, offset, sort, modifiedSince, createdSince);

        // TODO: test validations
    }
    
    /**
     * Get a product&#39;s details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductInfoTest() throws ApiException {
        String id = null;
        GetProductDetails response = api.getProductInfo(id);

        // TODO: test validations
    }
    
    /**
     * Return all your products
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        String sort = null;
        List<String> ids = null;
        String name = null;
        BigDecimal priceLte = null;
        BigDecimal priceGte = null;
        BigDecimal priceLt = null;
        BigDecimal priceGt = null;
        BigDecimal priceEq = null;
        BigDecimal priceNe = null;
        List<String> categories = null;
        String modifiedSince = null;
        String createdSince = null;
        GetProducts response = api.getProducts(limit, offset, sort, ids, name, priceLte, priceGte, priceLt, priceGt, priceEq, priceNe, categories, modifiedSince, createdSince);

        // TODO: test validations
    }
    
}
