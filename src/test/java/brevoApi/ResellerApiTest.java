/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoApi;

import brevo.ApiException;
import brevoModel.*;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for ResellerApi
 */
@Ignore
public class ResellerApiTest {

    private final ResellerApi api = new ResellerApi();

    
    /**
     * Add Email and/or SMS credits to a specific child account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCreditsTest() throws ApiException {
        String childIdentifier = null;
        AddCredits addCredits = null;
        RemainingCreditModel response = api.addCredits(childIdentifier, addCredits);

        // TODO: test validations
    }
    
    /**
     * Associate a dedicated IP to the child
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void associateIpToChildTest() throws ApiException {
        String childIdentifier = null;
        ManageIp ip = null;
        api.associateIpToChild(childIdentifier, ip);

        // TODO: test validations
    }
    
    /**
     * Create a domain for a child account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChildDomainTest() throws ApiException {
        String childIdentifier = null;
        AddChildDomain addChildDomain = null;
        api.createChildDomain(childIdentifier, addChildDomain);

        // TODO: test validations
    }
    
    /**
     * Creates a reseller child
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createResellerChildTest() throws ApiException {
        CreateChild resellerChild = null;
        CreateReseller response = api.createResellerChild(resellerChild);

        // TODO: test validations
    }
    
    /**
     * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChildDomainTest() throws ApiException {
        String childIdentifier = null;
        String domainName = null;
        api.deleteChildDomain(childIdentifier, domainName);

        // TODO: test validations
    }
    
    /**
     * Delete a single reseller child based on the child identifier supplied
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResellerChildTest() throws ApiException {
        String childIdentifier = null;
        api.deleteResellerChild(childIdentifier);

        // TODO: test validations
    }
    
    /**
     * Dissociate a dedicated IP to the child
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dissociateIpFromChildTest() throws ApiException {
        String childIdentifier = null;
        ManageIp ip = null;
        api.dissociateIpFromChild(childIdentifier, ip);

        // TODO: test validations
    }
    
    /**
     * Get the status of a reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the identifier supplied
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChildAccountCreationStatusTest() throws ApiException {
        String childIdentifier = null;
        GetChildAccountCreationStatus response = api.getChildAccountCreationStatus(childIdentifier);

        // TODO: test validations
    }
    
    /**
     * Get all sender domains for a specific child account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChildDomainsTest() throws ApiException {
        String childIdentifier = null;
        GetChildDomains response = api.getChildDomains(childIdentifier);

        // TODO: test validations
    }
    
    /**
     * Get a child account&#39;s details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChildInfoTest() throws ApiException {
        String childIdentifier = null;
        GetChildInfo response = api.getChildInfo(childIdentifier);

        // TODO: test validations
    }
    
    /**
     * Get the list of all children accounts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResellerChildsTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        GetChildrenList response = api.getResellerChilds(limit, offset);

        // TODO: test validations
    }
    
    /**
     * Get session token to access Brevo (SSO)
     *
     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSsoTokenTest() throws ApiException {
        String childIdentifier = null;
        GetSsoToken response = api.getSsoToken(childIdentifier);

        // TODO: test validations
    }
    
    /**
     * Remove Email and/or SMS credits from a specific child account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeCreditsTest() throws ApiException {
        String childIdentifier = null;
        RemoveCredits removeCredits = null;
        RemainingCreditModel response = api.removeCredits(childIdentifier, removeCredits);

        // TODO: test validations
    }
    
    /**
     * Update info of reseller&#39;s child account status based on the childIdentifier supplied
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChildAccountStatusTest() throws ApiException {
        String childIdentifier = null;
        UpdateChildAccountStatus updateChildAccountStatus = null;
        api.updateChildAccountStatus(childIdentifier, updateChildAccountStatus);

        // TODO: test validations
    }
    
    /**
     * Update the sender domain of reseller&#39;s child based on the childIdentifier and domainName passed
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChildDomainTest() throws ApiException {
        String childIdentifier = null;
        String domainName = null;
        UpdateChildDomain updateChildDomain = null;
        api.updateChildDomain(childIdentifier, domainName, updateChildDomain);

        // TODO: test validations
    }
    
    /**
     * Update info of reseller&#39;s child based on the child identifier supplied
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateResellerChildTest() throws ApiException {
        String childIdentifier = null;
        UpdateChild resellerChild = null;
        api.updateResellerChild(childIdentifier, resellerChild);

        // TODO: test validations
    }
    
}
