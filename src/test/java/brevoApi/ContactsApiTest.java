/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoApi;

import brevo.ApiException;
import brevoModel.*;
import org.junit.Ignore;
import org.junit.Test;

import java.util.List;

/**
 * API tests for ContactsApi
 */
@Ignore
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    
    /**
     * Add existing contacts to a list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContactToListTest() throws ApiException {
        Long listId = null;
        AddContactToList contactEmails = null;
        PostContactInfo response = api.addContactToList(listId, contactEmails);

        // TODO: test validations
    }
    
    /**
     * Create contact attribute
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAttributeTest() throws ApiException {
        String attributeCategory = null;
        String attributeName = null;
        CreateAttribute createAttribute = null;
        api.createAttribute(attributeCategory, attributeName, createAttribute);

        // TODO: test validations
    }
    
    /**
     * Create a contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        CreateContact createContact = null;
        CreateUpdateContactModel response = api.createContact(createContact);

        // TODO: test validations
    }
    
    /**
     * Create Contact via DOI (Double-Opt-In) Flow
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDoiContactTest() throws ApiException {
        CreateDoiContact createDoiContact = null;
        api.createDoiContact(createDoiContact);

        // TODO: test validations
    }
    
    /**
     * Create a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException {
        CreateUpdateFolder createFolder = null;
        CreateModel response = api.createFolder(createFolder);

        // TODO: test validations
    }
    
    /**
     * Create a list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createListTest() throws ApiException {
        CreateList createList = null;
        CreateModel response = api.createList(createList);

        // TODO: test validations
    }
    
    /**
     * Delete an attribute
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAttributeTest() throws ApiException {
        String attributeCategory = null;
        String attributeName = null;
        api.deleteAttribute(attributeCategory, attributeName);

        // TODO: test validations
    }
    
    /**
     * Delete a contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        String identifier = null;
        api.deleteContact(identifier);

        // TODO: test validations
    }
    
    /**
     * Delete a folder (and all its lists)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException {
        Long folderId = null;
        api.deleteFolder(folderId);

        // TODO: test validations
    }
    
    /**
     * Delete a list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListTest() throws ApiException {
        Long listId = null;
        api.deleteList(listId);

        // TODO: test validations
    }
    
    /**
     * List all attributes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttributesTest() throws ApiException {
        GetAttributes response = api.getAttributes();

        // TODO: test validations
    }
    
    /**
     * Get a contact&#39;s details
     *
     * Along with the contact details, this endpoint will show the statistics of contact for the recent 90 days by default. To fetch the earlier statistics, please use Get contact campaign stats (https://developers.brevo.com/reference/contacts-7#getcontactstats) endpoint with the appropriate date ranges.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactInfoTest() throws ApiException {
        String identifier = null;
        String startDate = null;
        String endDate = null;
        GetExtendedContactDetails response = api.getContactInfo(identifier, startDate, endDate);

        // TODO: test validations
    }
    
    /**
     * Get email campaigns&#39; statistics for a contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactStatsTest() throws ApiException {
        String identifier = null;
        String startDate = null;
        String endDate = null;
        GetContactCampaignStats response = api.getContactStats(identifier, startDate, endDate);

        // TODO: test validations
    }
    
    /**
     * Get all the contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        String modifiedSince = null;
        String createdSince = null;
        String sort = null;
        Long segmentId = null;
        List<Long> listIds = null;
        GetContacts response = api.getContacts(limit, offset, modifiedSince, createdSince, sort, segmentId, listIds);

        // TODO: test validations
    }
    
    /**
     * Get contacts in a list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsFromListTest() throws ApiException {
        Long listId = null;
        String modifiedSince = null;
        Long limit = null;
        Long offset = null;
        String sort = null;
        GetContacts response = api.getContactsFromList(listId, modifiedSince, limit, offset, sort);

        // TODO: test validations
    }
    
    /**
     * Returns a folder&#39;s details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFolderTest() throws ApiException {
        Long folderId = null;
        GetFolder response = api.getFolder(folderId);

        // TODO: test validations
    }
    
    /**
     * Get lists in a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFolderListsTest() throws ApiException {
        Long folderId = null;
        Long limit = null;
        Long offset = null;
        String sort = null;
        GetFolderLists response = api.getFolderLists(folderId, limit, offset, sort);

        // TODO: test validations
    }
    
    /**
     * Get all folders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFoldersTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        String sort = null;
        GetFolders response = api.getFolders(limit, offset, sort);

        // TODO: test validations
    }
    
    /**
     * Get a list&#39;s details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        Long listId = null;
        String startDate = null;
        String endDate = null;
        GetExtendedList response = api.getList(listId, startDate, endDate);

        // TODO: test validations
    }
    
    /**
     * Get all the lists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListsTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        String sort = null;
        GetLists response = api.getLists(limit, offset, sort);

        // TODO: test validations
    }
    
    /**
     * Get all the Segments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSegmentsTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        String sort = null;
        GetSegments response = api.getSegments(limit, offset, sort);

        // TODO: test validations
    }
    
    /**
     * Import contacts
     *
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.  **Note**: - Any contact attribute that doesn&#39;t exist in your account will be ignored at import end. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importContactsTest() throws ApiException {
        RequestContactImport requestContactImport = null;
        CreatedProcessId response = api.importContacts(requestContactImport);

        // TODO: test validations
    }
    
    /**
     * Delete a contact from a list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeContactFromListTest() throws ApiException {
        Long listId = null;
        RemoveContactFromList contactEmails = null;
        PostContactInfo response = api.removeContactFromList(listId, contactEmails);

        // TODO: test validations
    }
    
    /**
     * Export contacts
     *
     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestContactExportTest() throws ApiException {
        RequestContactExport requestContactExport = null;
        CreatedProcessId response = api.requestContactExport(requestContactExport);

        // TODO: test validations
    }
    
    /**
     * Update contact attribute
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAttributeTest() throws ApiException {
        String attributeCategory = null;
        String attributeName = null;
        UpdateAttribute updateAttribute = null;
        api.updateAttribute(attributeCategory, attributeName, updateAttribute);

        // TODO: test validations
    }
    
    /**
     * Update multiple contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBatchContactsTest() throws ApiException {
        UpdateBatchContacts updateBatchContacts = null;
        api.updateBatchContacts(updateBatchContacts);

        // TODO: test validations
    }
    
    /**
     * Update a contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String identifier = null;
        UpdateContact updateContact = null;
        api.updateContact(identifier, updateContact);

        // TODO: test validations
    }
    
    /**
     * Update a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFolderTest() throws ApiException {
        Long folderId = null;
        CreateUpdateFolder updateFolder = null;
        api.updateFolder(folderId, updateFolder);

        // TODO: test validations
    }
    
    /**
     * Update a list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateListTest() throws ApiException {
        Long listId = null;
        UpdateList updateList = null;
        api.updateList(listId, updateList);

        // TODO: test validations
    }
    
}
