/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoApi;

import brevo.ApiException;
import brevoModel.*;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for SmsCampaignsApi
 */
@Ignore
public class SmsCampaignsApiTest {

    private final SmsCampaignsApi api = new SmsCampaignsApi();

    
    /**
     * Creates an SMS campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmsCampaignTest() throws ApiException {
        CreateSmsCampaign createSmsCampaign = null;
        CreateModel response = api.createSmsCampaign(createSmsCampaign);

        // TODO: test validations
    }
    
    /**
     * Delete an SMS campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmsCampaignTest() throws ApiException {
        Long campaignId = null;
        api.deleteSmsCampaign(campaignId);

        // TODO: test validations
    }
    
    /**
     * Get an SMS campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmsCampaignTest() throws ApiException {
        Long campaignId = null;
        GetSmsCampaign response = api.getSmsCampaign(campaignId);

        // TODO: test validations
    }
    
    /**
     * Returns the information for all your created SMS campaigns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmsCampaignsTest() throws ApiException {
        String status = null;
        String startDate = null;
        String endDate = null;
        Long limit = null;
        Long offset = null;
        String sort = null;
        GetSmsCampaigns response = api.getSmsCampaigns(status, startDate, endDate, limit, offset, sort);

        // TODO: test validations
    }
    
    /**
     * Export an SMS campaign&#39;s recipients
     *
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestSmsRecipientExportTest() throws ApiException {
        Long campaignId = null;
        RequestSmsRecipientExport recipientExport = null;
        CreatedProcessId response = api.requestSmsRecipientExport(campaignId, recipientExport);

        // TODO: test validations
    }
    
    /**
     * Send your SMS campaign immediately
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendSmsCampaignNowTest() throws ApiException {
        Long campaignId = null;
        api.sendSmsCampaignNow(campaignId);

        // TODO: test validations
    }
    
    /**
     * Send an SMS campaign&#39;s report
     *
     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendSmsReportTest() throws ApiException {
        Long campaignId = null;
        SendReport sendReport = null;
        api.sendSmsReport(campaignId, sendReport);

        // TODO: test validations
    }
    
    /**
     * Send a test SMS campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendTestSmsTest() throws ApiException {
        Long campaignId = null;
        SendTestSms phoneNumber = null;
        api.sendTestSms(campaignId, phoneNumber);

        // TODO: test validations
    }
    
    /**
     * Update an SMS campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSmsCampaignTest() throws ApiException {
        Long campaignId = null;
        UpdateSmsCampaign updateSmsCampaign = null;
        api.updateSmsCampaign(campaignId, updateSmsCampaign);

        // TODO: test validations
    }
    
    /**
     * Update a campaign&#39;s status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSmsCampaignStatusTest() throws ApiException {
        Long campaignId = null;
        UpdateCampaignStatus status = null;
        api.updateSmsCampaignStatus(campaignId, status);

        // TODO: test validations
    }
    
}
