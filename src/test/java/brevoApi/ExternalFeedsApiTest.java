/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoApi;

import brevo.ApiException;
import brevoModel.*;
import org.junit.Ignore;
import org.junit.Test;
import org.threeten.bp.LocalDate;

/**
 * API tests for ExternalFeedsApi
 */
@Ignore
public class ExternalFeedsApiTest {

    private final ExternalFeedsApi api = new ExternalFeedsApi();

    
    /**
     * Create an external feed
     *
     * This endpoint will create an external feed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExternalFeedTest() throws ApiException {
        CreateExternalFeed createExternalFeed = null;
        InlineResponse2015 response = api.createExternalFeed(createExternalFeed);

        // TODO: test validations
    }
    
    /**
     * Delete an external feed
     *
     * This endpoint will delete an external feed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalFeedTest() throws ApiException {
        String uuid = null;
        api.deleteExternalFeed(uuid);

        // TODO: test validations
    }
    
    /**
     * Fetch all external feeds
     *
     * This endpoint can fetch all created external feeds.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllExternalFeedsTest() throws ApiException {
        String search = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String sort = null;
        String authType = null;
        Long limit = null;
        Long offset = null;
        GetAllExternalFeeds response = api.getAllExternalFeeds(search, startDate, endDate, sort, authType, limit, offset);

        // TODO: test validations
    }
    
    /**
     * Get an external feed by UUID
     *
     * This endpoint will update an external feed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExternalFeedByUUIDTest() throws ApiException {
        String uuid = null;
        GetExternalFeedByUUID response = api.getExternalFeedByUUID(uuid);

        // TODO: test validations
    }
    
    /**
     * Update an external feed
     *
     * This endpoint will update an external feed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExternalFeedTest() throws ApiException {
        String uuid = null;
        UpdateExternalFeed updateExternalFeed = null;
        api.updateExternalFeed(uuid, updateExternalFeed);

        // TODO: test validations
    }
    
}
