/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoModel;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.apache.commons.lang3.ObjectUtils;
import org.threeten.bp.OffsetDateTime;

import java.util.UUID;

/**
 * GetInboundEmailEventsEvents
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-04-17T12:57:43.398+05:30")
public class GetInboundEmailEventsEvents {
  @SerializedName("uuid")
  private UUID uuid = null;

  @SerializedName("date")
  private OffsetDateTime date = null;

  @SerializedName("sender")
  private String sender = null;

  @SerializedName("recipient")
  private String recipient = null;

  public GetInboundEmailEventsEvents uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID that can be used to fetch additional data
   * @return uuid
  **/
  @ApiModelProperty(required = true, value = "UUID that can be used to fetch additional data")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }

  public GetInboundEmailEventsEvents date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Date when email was received on SMTP relay
   * @return date
  **/
  @ApiModelProperty(required = true, value = "Date when email was received on SMTP relay")
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }

  public GetInboundEmailEventsEvents sender(String sender) {
    this.sender = sender;
    return this;
  }

   /**
   * Sender’s email address
   * @return sender
  **/
  @ApiModelProperty(required = true, value = "Sender’s email address")
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }

  public GetInboundEmailEventsEvents recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * Recipient’s email address
   * @return recipient
  **/
  @ApiModelProperty(required = true, value = "Recipient’s email address")
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    GetInboundEmailEventsEvents getInboundEmailEventsEvents = (GetInboundEmailEventsEvents) o;
    return ObjectUtils.equals(this.uuid, getInboundEmailEventsEvents.uuid) &&
    ObjectUtils.equals(this.date, getInboundEmailEventsEvents.date) &&
    ObjectUtils.equals(this.sender, getInboundEmailEventsEvents.sender) &&
    ObjectUtils.equals(this.recipient, getInboundEmailEventsEvents.recipient);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(uuid, date, sender, recipient);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetInboundEmailEventsEvents {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

