/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoModel;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.apache.commons.lang3.ObjectUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * SendWhatsappMessage
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-04-17T12:57:43.398+05:30")
public class SendWhatsappMessage {
  @SerializedName("templateId")
  private Integer templateId = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("senderNumber")
  private String senderNumber = null;

  @SerializedName("params")
  private Object params = null;

  @SerializedName("contactNumbers")
  private List<String> contactNumbers = new ArrayList<String>();

  public SendWhatsappMessage templateId(Integer templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * ID of the template to send
   * @return templateId
  **/
  @ApiModelProperty(example = "123", value = "ID of the template to send")
  public Integer getTemplateId() {
    return templateId;
  }

  public void setTemplateId(Integer templateId) {
    this.templateId = templateId;
  }

  public SendWhatsappMessage text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text to be sent as message body (will be overridden if templateId is passed in the same request)
   * @return text
  **/
  @ApiModelProperty(example = "Hi! There i am a message", value = "Text to be sent as message body (will be overridden if templateId is passed in the same request)")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public SendWhatsappMessage senderNumber(String senderNumber) {
    this.senderNumber = senderNumber;
    return this;
  }

   /**
   * WhatsApp Number with country code. Example, 85264318721
   * @return senderNumber
  **/
  @ApiModelProperty(example = "919876543210", required = true, value = "WhatsApp Number with country code. Example, 85264318721")
  public String getSenderNumber() {
    return senderNumber;
  }

  public void setSenderNumber(String senderNumber) {
    this.senderNumber = senderNumber;
  }

  public SendWhatsappMessage params(Object params) {
    this.params = params;
    return this;
  }

   /**
   * Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}.
   * @return params
  **/
  @ApiModelProperty(example = "{\"FNAME\":\"Joe\",\"LNAME\":\"Doe\"}", value = "Pass the set of attributes to customize the template. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}.")
  public Object getParams() {
    return params;
  }

  public void setParams(Object params) {
    this.params = params;
  }

  public SendWhatsappMessage contactNumbers(List<String> contactNumbers) {
    this.contactNumbers = contactNumbers;
    return this;
  }

  public SendWhatsappMessage addContactNumbersItem(String contactNumbersItem) {
    this.contactNumbers.add(contactNumbersItem);
    return this;
  }

   /**
   * List of phone numbers of the contacts
   * @return contactNumbers
  **/
  @ApiModelProperty(required = true, value = "List of phone numbers of the contacts")
  public List<String> getContactNumbers() {
    return contactNumbers;
  }

  public void setContactNumbers(List<String> contactNumbers) {
    this.contactNumbers = contactNumbers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    SendWhatsappMessage sendWhatsappMessage = (SendWhatsappMessage) o;
    return ObjectUtils.equals(this.templateId, sendWhatsappMessage.templateId) &&
    ObjectUtils.equals(this.text, sendWhatsappMessage.text) &&
    ObjectUtils.equals(this.senderNumber, sendWhatsappMessage.senderNumber) &&
    ObjectUtils.equals(this.params, sendWhatsappMessage.params) &&
    ObjectUtils.equals(this.contactNumbers, sendWhatsappMessage.contactNumbers);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(templateId, text, senderNumber, params, contactNumbers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendWhatsappMessage {\n");
    
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    senderNumber: ").append(toIndentedString(senderNumber)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    contactNumbers: ").append(toIndentedString(contactNumbers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

