/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoModel;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import org.apache.commons.lang3.ObjectUtils;

import java.io.IOException;

/**
 * GetWhatsappEventReportEvents
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-04-17T12:57:43.398+05:30")
public class GetWhatsappEventReportEvents {
  @SerializedName("contactNumber")
  private String contactNumber = null;

  @SerializedName("date")
  private String date = null;

  @SerializedName("messageId")
  private String messageId = null;

  /**
   * Event which occurred
   */
  @JsonAdapter(EventEnum.Adapter.class)
  public enum EventEnum {
    SENT("sent"),
    
    DELIVERED("delivered"),
    
    READ("read"),
    
    ERROR("error"),
    
    UNSUBSCRIBE("unsubscribe"),
    
    REPLY("reply"),
    
    SOFT_BOUNCE("soft-bounce");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventEnum fromValue(String text) {
      for (EventEnum b : EventEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EventEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("event")
  private EventEnum event = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("mediaUrl")
  private String mediaUrl = null;

  @SerializedName("senderNumber")
  private String senderNumber = null;

  public GetWhatsappEventReportEvents contactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
    return this;
  }

   /**
   * WhatsApp Number with country code. Example, 85264318721
   * @return contactNumber
  **/
  @ApiModelProperty(example = "919876543210", required = true, value = "WhatsApp Number with country code. Example, 85264318721")
  public String getContactNumber() {
    return contactNumber;
  }

  public void setContactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
  }

  public GetWhatsappEventReportEvents date(String date) {
    this.date = date;
    return this;
  }

   /**
   * UTC date-time on which the event has been generated
   * @return date
  **/
  @ApiModelProperty(example = "2017-03-12T12:30:00.000+0000", required = true, value = "UTC date-time on which the event has been generated")
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public GetWhatsappEventReportEvents messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

   /**
   * Message ID which generated the event
   * @return messageId
  **/
  @ApiModelProperty(example = "23befbae-1505-47a8-bd27-e30ef739f32c", required = true, value = "Message ID which generated the event")
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }

  public GetWhatsappEventReportEvents event(EventEnum event) {
    this.event = event;
    return this;
  }

   /**
   * Event which occurred
   * @return event
  **/
  @ApiModelProperty(example = "delivered", required = true, value = "Event which occurred")
  public EventEnum getEvent() {
    return event;
  }

  public void setEvent(EventEnum event) {
    this.event = event;
  }

  public GetWhatsappEventReportEvents reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Reason for the event (will be there in case of &#x60;error&#x60; and &#x60;soft-bounce&#x60; events)
   * @return reason
  **/
  @ApiModelProperty(example = "23befbae-1505-47a8-bd27-e30ef739f32c", value = "Reason for the event (will be there in case of `error` and `soft-bounce` events)")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public GetWhatsappEventReportEvents body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Text of the reply (will be there only in case of &#x60;reply&#x60; event with text)
   * @return body
  **/
  @ApiModelProperty(example = "Hi! I am a reply", value = "Text of the reply (will be there only in case of `reply` event with text)")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public GetWhatsappEventReportEvents mediaUrl(String mediaUrl) {
    this.mediaUrl = mediaUrl;
    return this;
  }

   /**
   * Url of the media reply (will be there only in case of &#x60;reply&#x60; event with media)
   * @return mediaUrl
  **/
  @ApiModelProperty(example = "https://example.com/media.png", value = "Url of the media reply (will be there only in case of `reply` event with media)")
  public String getMediaUrl() {
    return mediaUrl;
  }

  public void setMediaUrl(String mediaUrl) {
    this.mediaUrl = mediaUrl;
  }

  public GetWhatsappEventReportEvents senderNumber(String senderNumber) {
    this.senderNumber = senderNumber;
    return this;
  }

   /**
   * WhatsApp Number with country code. Example, 85264318721
   * @return senderNumber
  **/
  @ApiModelProperty(example = "919876543210", required = true, value = "WhatsApp Number with country code. Example, 85264318721")
  public String getSenderNumber() {
    return senderNumber;
  }

  public void setSenderNumber(String senderNumber) {
    this.senderNumber = senderNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    GetWhatsappEventReportEvents getWhatsappEventReportEvents = (GetWhatsappEventReportEvents) o;
    return ObjectUtils.equals(this.contactNumber, getWhatsappEventReportEvents.contactNumber) &&
    ObjectUtils.equals(this.date, getWhatsappEventReportEvents.date) &&
    ObjectUtils.equals(this.messageId, getWhatsappEventReportEvents.messageId) &&
    ObjectUtils.equals(this.event, getWhatsappEventReportEvents.event) &&
    ObjectUtils.equals(this.reason, getWhatsappEventReportEvents.reason) &&
    ObjectUtils.equals(this.body, getWhatsappEventReportEvents.body) &&
    ObjectUtils.equals(this.mediaUrl, getWhatsappEventReportEvents.mediaUrl) &&
    ObjectUtils.equals(this.senderNumber, getWhatsappEventReportEvents.senderNumber);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(contactNumber, date, messageId, event, reason, body, mediaUrl, senderNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWhatsappEventReportEvents {\n");
    
    sb.append("    contactNumber: ").append(toIndentedString(contactNumber)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    mediaUrl: ").append(toIndentedString(mediaUrl)).append("\n");
    sb.append("    senderNumber: ").append(toIndentedString(senderNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

