/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoModel;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.apache.commons.lang3.ObjectUtils;

/**
 * AbTestCampaignResultStatistics
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-04-17T12:57:43.398+05:30")
public class AbTestCampaignResultStatistics {
  @SerializedName("openers")
  private AbTestVersionStats openers = null;

  @SerializedName("clicks")
  private AbTestVersionStats clicks = null;

  @SerializedName("unsubscribed")
  private AbTestVersionStats unsubscribed = null;

  @SerializedName("hardBounces")
  private AbTestVersionStats hardBounces = null;

  @SerializedName("softBounces")
  private AbTestVersionStats softBounces = null;

  @SerializedName("complaints")
  private AbTestVersionStats complaints = null;

  public AbTestCampaignResultStatistics openers(AbTestVersionStats openers) {
    this.openers = openers;
    return this;
  }

   /**
   * Get openers
   * @return openers
  **/
  @ApiModelProperty(required = true, value = "")
  public AbTestVersionStats getOpeners() {
    return openers;
  }

  public void setOpeners(AbTestVersionStats openers) {
    this.openers = openers;
  }

  public AbTestCampaignResultStatistics clicks(AbTestVersionStats clicks) {
    this.clicks = clicks;
    return this;
  }

   /**
   * Get clicks
   * @return clicks
  **/
  @ApiModelProperty(required = true, value = "")
  public AbTestVersionStats getClicks() {
    return clicks;
  }

  public void setClicks(AbTestVersionStats clicks) {
    this.clicks = clicks;
  }

  public AbTestCampaignResultStatistics unsubscribed(AbTestVersionStats unsubscribed) {
    this.unsubscribed = unsubscribed;
    return this;
  }

   /**
   * Get unsubscribed
   * @return unsubscribed
  **/
  @ApiModelProperty(required = true, value = "")
  public AbTestVersionStats getUnsubscribed() {
    return unsubscribed;
  }

  public void setUnsubscribed(AbTestVersionStats unsubscribed) {
    this.unsubscribed = unsubscribed;
  }

  public AbTestCampaignResultStatistics hardBounces(AbTestVersionStats hardBounces) {
    this.hardBounces = hardBounces;
    return this;
  }

   /**
   * Get hardBounces
   * @return hardBounces
  **/
  @ApiModelProperty(required = true, value = "")
  public AbTestVersionStats getHardBounces() {
    return hardBounces;
  }

  public void setHardBounces(AbTestVersionStats hardBounces) {
    this.hardBounces = hardBounces;
  }

  public AbTestCampaignResultStatistics softBounces(AbTestVersionStats softBounces) {
    this.softBounces = softBounces;
    return this;
  }

   /**
   * Get softBounces
   * @return softBounces
  **/
  @ApiModelProperty(required = true, value = "")
  public AbTestVersionStats getSoftBounces() {
    return softBounces;
  }

  public void setSoftBounces(AbTestVersionStats softBounces) {
    this.softBounces = softBounces;
  }

  public AbTestCampaignResultStatistics complaints(AbTestVersionStats complaints) {
    this.complaints = complaints;
    return this;
  }

   /**
   * Get complaints
   * @return complaints
  **/
  @ApiModelProperty(required = true, value = "")
  public AbTestVersionStats getComplaints() {
    return complaints;
  }

  public void setComplaints(AbTestVersionStats complaints) {
    this.complaints = complaints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    AbTestCampaignResultStatistics abTestCampaignResultStatistics = (AbTestCampaignResultStatistics) o;
    return ObjectUtils.equals(this.openers, abTestCampaignResultStatistics.openers) &&
    ObjectUtils.equals(this.clicks, abTestCampaignResultStatistics.clicks) &&
    ObjectUtils.equals(this.unsubscribed, abTestCampaignResultStatistics.unsubscribed) &&
    ObjectUtils.equals(this.hardBounces, abTestCampaignResultStatistics.hardBounces) &&
    ObjectUtils.equals(this.softBounces, abTestCampaignResultStatistics.softBounces) &&
    ObjectUtils.equals(this.complaints, abTestCampaignResultStatistics.complaints);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(openers, clicks, unsubscribed, hardBounces, softBounces, complaints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbTestCampaignResultStatistics {\n");
    
    sb.append("    openers: ").append(toIndentedString(openers)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    hardBounces: ").append(toIndentedString(hardBounces)).append("\n");
    sb.append("    softBounces: ").append(toIndentedString(softBounces)).append("\n");
    sb.append("    complaints: ").append(toIndentedString(complaints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

