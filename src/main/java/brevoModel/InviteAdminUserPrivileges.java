/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoModel;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.apache.commons.lang3.ObjectUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Privileges given to the user
 */
@ApiModel(description = "Privileges given to the user")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-04-17T12:57:43.398+05:30")
public class InviteAdminUserPrivileges {
  /**
   * Feature name
   */
  @JsonAdapter(FeatureEnum.Adapter.class)
  public enum FeatureEnum {
    MY_PLAN("my_plan"),
    
    API("api"),
    
    USER_MANAGEMENT("user_management"),
    
    APP_MANAGEMENT("app_management");

    private String value;

    FeatureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeatureEnum fromValue(String text) {
      for (FeatureEnum b : FeatureEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FeatureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeatureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeatureEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FeatureEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("feature")
  private FeatureEnum feature = null;

  /**
   * Gets or Sets permissions
   */
  @JsonAdapter(PermissionsEnum.Adapter.class)
  public enum PermissionsEnum {
    ALL("all"),
    
    NONE("none");

    private String value;

    PermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionsEnum fromValue(String text) {
      for (PermissionsEnum b : PermissionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PermissionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("permissions")
  private List<PermissionsEnum> permissions = null;

  public InviteAdminUserPrivileges feature(FeatureEnum feature) {
    this.feature = feature;
    return this;
  }

   /**
   * Feature name
   * @return feature
  **/
  @ApiModelProperty(example = "user_management", value = "Feature name")
  public FeatureEnum getFeature() {
    return feature;
  }

  public void setFeature(FeatureEnum feature) {
    this.feature = feature;
  }

  public InviteAdminUserPrivileges permissions(List<PermissionsEnum> permissions) {
    this.permissions = permissions;
    return this;
  }

  public InviteAdminUserPrivileges addPermissionsItem(PermissionsEnum permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<PermissionsEnum>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Permissions for a given feature
   * @return permissions
  **/
  @ApiModelProperty(value = "Permissions for a given feature")
  public List<PermissionsEnum> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<PermissionsEnum> permissions) {
    this.permissions = permissions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    InviteAdminUserPrivileges inviteAdminUserPrivileges = (InviteAdminUserPrivileges) o;
    return ObjectUtils.equals(this.feature, inviteAdminUserPrivileges.feature) &&
    ObjectUtils.equals(this.permissions, inviteAdminUserPrivileges.permissions);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(feature, permissions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InviteAdminUserPrivileges {\n");
    
    sb.append("    feature: ").append(toIndentedString(feature)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

