/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoModel;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import org.apache.commons.lang3.ObjectUtils;

import java.io.IOException;
import java.math.BigDecimal;

/**
 * ConversionSourceMetrics
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-04-17T12:57:43.398+05:30")
public class ConversionSourceMetrics {
  @SerializedName("id")
  private BigDecimal id = null;

  /**
   * Gets or Sets conversionSource
   */
  @JsonAdapter(ConversionSourceEnum.Adapter.class)
  public enum ConversionSourceEnum {
    EMAIL_CAMPAIGN("email_campaign");

    private String value;

    ConversionSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConversionSourceEnum fromValue(String text) {
      for (ConversionSourceEnum b : ConversionSourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConversionSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConversionSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConversionSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConversionSourceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("conversionSource")
  private ConversionSourceEnum conversionSource = null;

  @SerializedName("ordersCount")
  private BigDecimal ordersCount = null;

  @SerializedName("revenue")
  private Float revenue = null;

  @SerializedName("averageBasket")
  private Float averageBasket = null;

  public ConversionSourceMetrics id(BigDecimal id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }

  public ConversionSourceMetrics conversionSource(ConversionSourceEnum conversionSource) {
    this.conversionSource = conversionSource;
    return this;
  }

   /**
   * Get conversionSource
   * @return conversionSource
  **/
  @ApiModelProperty(required = true, value = "")
  public ConversionSourceEnum getConversionSource() {
    return conversionSource;
  }

  public void setConversionSource(ConversionSourceEnum conversionSource) {
    this.conversionSource = conversionSource;
  }

  public ConversionSourceMetrics ordersCount(BigDecimal ordersCount) {
    this.ordersCount = ordersCount;
    return this;
  }

   /**
   * Get ordersCount
   * @return ordersCount
  **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getOrdersCount() {
    return ordersCount;
  }

  public void setOrdersCount(BigDecimal ordersCount) {
    this.ordersCount = ordersCount;
  }

  public ConversionSourceMetrics revenue(Float revenue) {
    this.revenue = revenue;
    return this;
  }

   /**
   * Get revenue
   * @return revenue
  **/
  @ApiModelProperty(required = true, value = "")
  public Float getRevenue() {
    return revenue;
  }

  public void setRevenue(Float revenue) {
    this.revenue = revenue;
  }

  public ConversionSourceMetrics averageBasket(Float averageBasket) {
    this.averageBasket = averageBasket;
    return this;
  }

   /**
   * Get averageBasket
   * @return averageBasket
  **/
  @ApiModelProperty(required = true, value = "")
  public Float getAverageBasket() {
    return averageBasket;
  }

  public void setAverageBasket(Float averageBasket) {
    this.averageBasket = averageBasket;
  }


  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    ConversionSourceMetrics conversionSourceMetrics = (ConversionSourceMetrics) o;
    return ObjectUtils.equals(this.id, conversionSourceMetrics.id) &&
    ObjectUtils.equals(this.conversionSource, conversionSourceMetrics.conversionSource) &&
    ObjectUtils.equals(this.ordersCount, conversionSourceMetrics.ordersCount) &&
    ObjectUtils.equals(this.revenue, conversionSourceMetrics.revenue) &&
    ObjectUtils.equals(this.averageBasket, conversionSourceMetrics.averageBasket);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(id, conversionSource, ordersCount, revenue, averageBasket);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionSourceMetrics {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    conversionSource: ").append(toIndentedString(conversionSource)).append("\n");
    sb.append("    ordersCount: ").append(toIndentedString(ordersCount)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    averageBasket: ").append(toIndentedString(averageBasket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

