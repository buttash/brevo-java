/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package brevoModel;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.apache.commons.lang3.ObjectUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * OrderBatch
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-04-17T12:57:43.398+05:30")
public class OrderBatch {
  @SerializedName("orders")
  private List<Order> orders = new ArrayList<Order>();

  @SerializedName("notifyUrl")
  private String notifyUrl = null;

  @SerializedName("historical")
  private Boolean historical = true;

  public OrderBatch orders(List<Order> orders) {
    this.orders = orders;
    return this;
  }

  public OrderBatch addOrdersItem(Order ordersItem) {
    this.orders.add(ordersItem);
    return this;
  }

   /**
   * array of order objects
   * @return orders
  **/
  @ApiModelProperty(required = true, value = "array of order objects")
  public List<Order> getOrders() {
    return orders;
  }

  public void setOrders(List<Order> orders) {
    this.orders = orders;
  }

  public OrderBatch notifyUrl(String notifyUrl) {
    this.notifyUrl = notifyUrl;
    return this;
  }

   /**
   * Notify Url provided by client to get the status of batch request
   * @return notifyUrl
  **/
  @ApiModelProperty(example = "https://en.wikipedia.org/wiki/Webhook", value = "Notify Url provided by client to get the status of batch request")
  public String getNotifyUrl() {
    return notifyUrl;
  }

  public void setNotifyUrl(String notifyUrl) {
    this.notifyUrl = notifyUrl;
  }

  public OrderBatch historical(Boolean historical) {
    this.historical = historical;
    return this;
  }

   /**
   * Defines wether you want your orders to be considered as live data or as historical data (import of past data, synchronising data). True: orders will not trigger any automation workflows. False: orders will trigger workflows as usual.
   * @return historical
  **/
  @ApiModelProperty(example = "true", value = "Defines wether you want your orders to be considered as live data or as historical data (import of past data, synchronising data). True: orders will not trigger any automation workflows. False: orders will trigger workflows as usual.")
  public Boolean isHistorical() {
    return historical;
  }

  public void setHistorical(Boolean historical) {
    this.historical = historical;
  }


  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    OrderBatch orderBatch = (OrderBatch) o;
    return ObjectUtils.equals(this.orders, orderBatch.orders) &&
    ObjectUtils.equals(this.notifyUrl, orderBatch.notifyUrl) &&
    ObjectUtils.equals(this.historical, orderBatch.historical);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(orders, notifyUrl, historical);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderBatch {\n");
    
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    notifyUrl: ").append(toIndentedString(notifyUrl)).append("\n");
    sb.append("    historical: ").append(toIndentedString(historical)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

